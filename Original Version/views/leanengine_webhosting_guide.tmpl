{% set appid = '{{appid}}' %}
{% set appkey = '{{appkey}}' %}
{% set masterkey = '{{masterkey}}' %}
{% set var_app_domain = '{应用的域名}' %}
# 网站托管开发指南 &middot; {{platformName}}

使用你熟悉的语言开发一个 web 程序，提供静态和动态路由，开发一个 web 站点，拥有自己的二级域名；或者为移动应用提供一个介绍和下载页；或者开发一个管理员控制台。

网站托管是云引擎的一个子模块，请确保在阅读本文档之前，你已阅读了 [云引擎服务概览](leanengine_overview.html)。

如果还不知道如何创建云引擎项目，本地调试并部署到云端，请阅读 [云引擎快速入门](leanengine_quickstart.html)。

## 多语言支持

云引擎支持多种语言的运行环境，你可以选择自己熟悉的语言开发应用：

- [Node.js](leanengine_webhosting_guide-node.html)
- [Python](leanengine_guide-python.html)
<!-- - PHP：[云引擎开发指南-PHP](leanengine_guide_v2-php.html) -->

## 项目约束

### 项目格式

你的项目需要遵循一定格式才会被云引擎识别并运行。

{% block project_constraint %}{% endblock %}

{% block project_start %}{% endblock %}

### 健康监测

云引擎项目在部署启动时，部署服务会对新启动的应用进行 `ping` 监测（每隔 1 秒请求一次，一共 15 次），请求 URL 为 `/__engine/1/ping`，如果响应的 `statusCode` 为 `200` 则认为新的节点启动成功，整个部署才会成功；否则会收到 **应用启动检测失败** 类型的错误信息，导致部署失败。

{% block ping %}{% endblock %}

### Web 框架

{% block supported_frameworks%}{% endblock %}

### 环境变量

云引擎平台提供下列环境变量供应用使用：

变量名|说明
---|---
`LEANCLOUD_APP_ID`|当前应用的 App Id
`LEANCLOUD_APP_KEY`|当前应用的 App Key
`LEANCLOUD_APP_MASTER_KEY`|当前应用的 Master Key
`LEANCLOUD_APP_ENV`|当前的应用环境：<ul><li>开发环境没有该环境变量，或值为 `development`（一般指本地开发）</li><li>预备环境值为 `stage`</li><li>生产环境值为 `production`</li></ul>
`LEANCLOUD_APP_PORT`|当前应用开放给外网的端口，只有监听此端口，用户才可以访问到你的服务。
`LEANCLOUD_APP_INSTANCE`|云引擎实例名称，在多实例环境可以通过此变量标示自己。
`LEANCLOUD_REGION`|云引擎服务所在区域，值为 `CN` 或 `US`，分别表示国内节点和美国节点。

**提示**：旧版云引擎使用的以 `LC_` 开头的环境变量（如 `LC_APP_ID`）已经被弃用。为了保证代码兼容性，`LC_` 变量在一段时间内依然有效，但未来可能会完全失效。为了避免报错，建议使用 `LEANCLOUD_` 变量来替换。

**提示**：如果在客户端想调用云引擎的预备环境，各个 SDK 都有类似于 `setProduction` 的方法，比如 [JavaScript SDK &middot; AV.setProduction(production)](/api-docs/javascript/symbols/AV.html#.setProduction)，其中 `production` 设置为 `0` 则该 SDK 将请求预备环境；设置为 `1` 将请求生产环境，默认为 `1`。


## 存储数据

{% block use_leanstorage %}{% endblock %}

## 部署

### 使用命令行工具部署

使用命令行工具可以非常方便地部署、发布应用，查看应用状态，查看日志，甚至支持多应用部署。具体使用请参考 [命令行工具指南](leanengine_cli.html)。

除此之外，还可以使用 git 仓库部署。你需要将项目提交到一个 git 仓库，我们并不提供源码的版本管理功能，而是借助于 git 这个优秀的分布式版本管理工具。我们推荐你使用 [CSDN Code 平台](https://code.csdn.net/)、[Github](https://github.com/) 或者 [BitBucket](https://bitbucket.org/) 这样第三方的源码托管网站，也可以使用你自己搭建的 git 仓库（比如 [gitlab.org](http://gitlab.org/)）。

### 使用 CSDN Code 托管源码

CSDN Code 是国内非常优秀的源码托管平台，你可以使用这个平台提供公有仓库和有限的私有仓库完成对代码的管理功能。以下是该平台与 LeanCloud 云引擎结合的一个例子。

首先在 CSDN Code 上创建一个项目：

![image](images/csdn_code1.png)

**提示**：在已经有项目代码的情况下，一般不推荐 **使用 README 文件初始化项目**。

接下来按照给出的提示，将源代码 push 到这个代码仓中：

```sh
cd ${PROJECT_DIR}
git init
git add *
git commit -m "first commit"
git remote add origin git@code.csdn.net:${yourname}/test.git
git push -u origin master
```

我们已经将源码成功推送到 CSDN Code 平台，接下来到 LeanCloud 云引擎的管理界面填写下你的 git 地址（请注意，一定要填写以 `git@` 开头的地址，我们暂不支持 https 协议 clone 源码）并点击 save 按钮保存：

![image](images/csdn_code2.png)

添加 deploy key 到你的 CSDN Code 平台项目上（deploy key 是我们云引擎机器的 ssh public key）保存到 **项目设置** / **项目公钥** 中，创建新的一项 avoscloud：

![image](images/csdn_code3.png)

下一步，部署源码到预备环境，进入 [云引擎 / Git 部署](/cloud.html?appid={{appid}}#/deploy) 菜单，点击「部署到开发环境」的部署按钮：

![image](images/cloud_code_5.png)

部署成功后，可以看到开发环境版本号从 undeploy 变成了当前提交的源码版本号。


### 使用 GitHub 托管源码

使用 BitBucket 与此类似，不再赘述。

[Github](https://github.com) 是一个非常优秀的源码托管平台，你可以使用它的免费账号，那将无法创建私有仓库（bucket 可以创建私有仓库），也可以付费成为高级用户，可以创建私有仓库。

首先在 Github上创建一个项目，比如就叫 `test`：

![image](images/github1.png)

![image](images/github2.png)

接下来按照 Github 给出的提示，我们将源码 push 到这个代码仓库：

```sh
cd ${PROJECT_DIR}
git init
git add *
git commit -m "first commit"
git remote add origin git@github.com:${yourname}/test.git
git push -u origin master
```

到这一步我们已经将源码成功 push 到 Github，接下来到云引擎的管理界面填写下你的 git 地址（请注意，一定要填写以 `git@` 开头的地址，我们暂不支持 https 协议 clone 源码）并点击 save 按钮保存：

![image](images/cloud_code_4.png)

并添加 deploy key 到你的 github 项目（deploy key 是我们云引擎机器的 ssh public key），如果你是私有项目，需要设置 deploy key，

拷贝 **设置** 菜单里的 **Deploy key** 保存到 github setting 里的 deploy key，创建新的一项 avoscloud：

![image](images/cloud_code_github_deploy_key.png)

下一步，部署源码到预备环境，进入 **云引擎** / **Git 部署** 菜单，点击 **部署到开发环境** 的部署按钮：

![image](images/cloud_code_5.png)

部署成功后，可以看到开发环境版本号从 undeploy 变成了当前提交的源码版本号。

### Gitlab 无法部署问题

很多用户自己使用 [Gitlab](http://gitlab.org/)搭建了自己的源码仓库，有朋友会遇到无法部署到 LeanCloud 的问题，即使设置了 Deploy Key，却仍然要求输入密码。

可能的原因和解决办法如下：

* 确保你 gitlab 运行所在服务器的 /etc/shadow 文件里的 git（或者 gitlab）用户一行的 `!`修改为 `*`，原因参考 [Stackoverflow - SSH Key asks for password](http://stackoverflow.com/questions/15664561/ssh-key-asks-for-password)，并重启 SSH 服务：`sudo service ssh restart`。
* 在拷贝 deploy key 时，确保没有多余的换行符号。
* Gitlab 目前不支持有 comment 的 deploy key。早期 LeanCloud 用户生成的 deploy key 可能带 comment，这个 comment 是在 deploy key 的末尾 76 个字符长度的字符串，例如下面这个 deploy key：

```
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5EZmrZZjbKb07yipeSkL+Hm+9mZAqyMfPu6BTAib+RVy57jAP/lZXuosyPwtLolTwdyCXjuaDw9zNwHdweHfqOX0TlTQQSDBwsHL+ead/p6zBjn7VBL0YytyYIQDXbLUM5d1f+wUYwB+Cav6nM9PPdBckT9Nc1slVQ9ITBAqKZhNegUYehVRqxa+CtH7XjN7w7/UZ3oYAvqx3t6si5TuZObWoH/poRYJJ+GxTZFBY+BXaREWmFLbGW4O1jGW9olIZJ5/l9GkTgl7BCUWJE7kLK5m7+DYnkBrOiqMsyj+ChAm+o3gJZWr++AFZj/pToS6Vdwg1SD0FFjUTHPaxkUlNw== App dxzag3zdjuxbbfufuy58x1mvjq93udpblx7qoq0g27z51cx3's cloud code deploy key
```
其中最后 76 个字符：

```
App dxzag3zdjuxbbfufuy58x1mvjq93udpblx7qoq0g27z51cx3's cloud code deploy key
```

就是 comment，删除这段字符串后的 deploy key（如果没有这个字样的comment无需删除）保存到 gitlab 即可正常使用：

```
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5EZmrZZjbKb07yipeSkL+Hm+9mZAqyMfPu6BTAib+RVy57jAP/lZXuosyPwtLolTwdyCXjuaDw9zNwHdweHfqOX0TlTQQSDBwsHL+ead/p6zBjn7VBL0YytyYIQDXbLUM5d1f+wUYwB+Cav6nM9PPdBckT9Nc1slVQ9ITBAqKZhNegUYehVRqxa+CtH7XjN7w7/UZ3oYAvqx3t6si5TuZObWoH/poRYJJ+GxTZFBY+BXaREWmFLbGW4O1jGW9olIZJ5/l9GkTgl7BCUWJE7kLK5m7+DYnkBrOiqMsyj+ChAm+o3gJZWr++AFZj/pToS6Vdwg1SD0FFjUTHPaxkUlNw==
```



## Web 组件

### 自定义 API
{{productName}} 允许开发者自定义基于 HTTP（HTTPS） 的 API。
例如，开发者如果想实现一个获取服务端时间的 API，可以在代码中如下做：

{% block custom_api_random_string %}
{% endblock %}

然后打开浏览器，访问 <http://localhost:3000/time>，浏览器应该会返回如下类似的内容：

```json
{"currentTime":"2016-02-01T09:43:26.223Z"}
```

部署到云端后，你可以通过 `http://{{var_app_domain}}.leanapp.cn/time` 来访问该 API。你的 iOS 或者 Android 的程序就可以构建一个 HTTP 请求获取服务端时间了。当然还是建议使用各 SDK 内置的获取服务器时间的 API，这里的例子只是演示。

### 发送 HTTP 请求

{% block http_client %}{% endblock %}

### 获取客户端 IP

如果你想获取客户端的 IP，可以直接从用户请求的 HTTP 头的 `x-real-ip` 字段获取，实例代码如下：

{% block code_get_client_ip_address %}{% endblock %}

### 上传文件
托管在 {{productName}} 的网站项目可以直接使用内置的 LeanCloud {{sdk_name}} SDK 的 API 文件相关的接口直接处理文件的上传。

假设前端 HTML 代码如下：

```html
<form enctype="multipart/form-data" method="post" action="/upload">
  <input type="file" name="iconImage">
  <input type="submit" name="submit" value="submit">
</form>
```

{% block upload_file_special_middleware %}{% endblock %}

接下来定义文件上传的处理函数，构建一个 Form 对象，并将 req 作为参数进行解析，会将请求中的文件保存到临时文件目录，并构造 files 对象：

{% block code_upload_file_sdk_function %}{% endblock %}

{% block cookie_session %}{% endblock %}

{% block custom_session %}{% endblock %}

### 自动重定向到 HTTPS

为了安全性，我们可能会为网站加上 HTTPS 加密传输。我们的 {{productName}} 支持网站托管，同样会有这样的需求。

因此我们在 {{productName}} 中提供了一个新的 middleware 来强制让你的 `{{var_app_domain}}.leanapp.cn` 的网站通过 https 访问，你只要这样：

{% block https_redirect %}{% endblock %}

部署并发布到生产环境之后，访问你的 {{productName}} 网站二级域名都会强制通过 HTTPS 访问。

## 设置域名

首先，你需要到 [云引擎 > 设置](/cloud.html?appid={{appid}}#/conf) 页面找到 **Web 主机域名**，在这里填写你的域名：

![image](images/cloud_code_web_setting.png)

上面将应用的二级域名设置为 **myapp**，设置之后，你应该可以马上访问：

- http://myapp.leanapp.cn
- http://myapp.avosapps.us

可能因为 DNS 生效延迟暂时不可访问，请耐心等待或者尝试刷新 DNS 缓存，如果还没有部署，你看到的应该是一个 404 页面。

## 绑定独立域名

只有主域名需要备案，二级子域名不需要备案。独立域名要根据 Web 主机域名来解析，绑定完成后 Web 主机域名不可变更，否则会导致独立域名绑定失效。

### 主域名

仅使用云引擎托管静态文件、未使用其他 LeanCloud 服务的用户，需要自行办理独立域名与应用绑定的相关手续。
{{productName}} 
**请注意，根据政策法规要求，在完成绑定独立域名前，请不要将独立域名解析到云引擎**。

其他用户如果需要为应用绑定一个独立域名，可以使用账户注册邮箱将下列信息发送至 <support@leancloud.cn>，或者从控制台菜单中选择 [帮助 / 技术支持](https://ticket.leancloud.cn/)，通过工单来提出申请：

* 你已经绑定的 leanapp.cn 或 avosapps.us 二级子域名（请参考设置域名）
* 要绑定的域名（必须是你名下的域名）
* 你的注册邮箱（必须与发送者的邮箱一致）
* 你想要绑定的 App Id（该应用必须位于注册邮箱的用户名下）
* 你的域名的备案信息（**国内必须可以在工信部查询到，美国区不需要**）

我们会在 3 个工作日内完成审核，如果审核通过将为你绑定域名。请在绑定操作完成后配置 DNS：

- 将要绑定域名的 CNAME 或者 A 记录指向 leanapp.cn（国内）或 avosapps.us（美国）

### 域名备案流程

**域名备案的前置条件：云引擎已经部署，并且网站内容和备案申请的内容一致。**

仅使用 {{productName}} 托管静态文件、未使用其他 LeanCloud 服务的企业用户，请自行完成域名备案工作。

其他企业用户，若尚未在国内对其域名进行过备案，可以申请由我们协助来完成备案工作。其流程大致如下：

1. 请提供相应资料，我们来录入；完成后提供备案订单号给你，请在联系备案服务商时提供。
2. 请携带资料去 [备案提供商的核验点](#isp_inspection_office) 拍照；如果不方便，备案服务商会安排给你邮寄幕布，进行拍照验证，完成后请将其他资料签字盖章后一起邮寄给备案提供商。
3. 提交备案到（公司所在地）管局（通信管理局）审核。

<div class="callout callout-info">请注意：国内各地管局对备案的政策有差别，如北京地区对域名后缀有限制，陕西地区需要提交组织机构代码证，山东地区要求服务器必须托管在山东省内（因此我们无法为山东地区用户备案）等。具体请查询当地管局。</div>

#### 第一步

请提交以下资料，我们来帮你录入到系统：

1. 单位名称、单位注册地址、单位通信地址、营业执照号码、营业执照副本扫描件；
2. 企业法人姓名、身份证号码、身份证扫描件电子档（正反面需在一起）、邮箱、手机号、座机电话（归属地为公司所在地）、QQ 号码；
3. 如果网站负责人和法人不为同一人话，还需要提供网站负责人的姓名、身份证号码、身份证扫描件电子档（正反面需在一起）、邮箱、手机号、座机电话（归属地为公司所在地）、联系地址（可以为单位通信地址）、QQ 号码；
4. 网站名称（4 个汉字及以上）、首页地址、域名（可多个）、域名证书（可多个）
5. 网站服务内容，请在以下列表中选择一项：
  <div class="row">
  <div class="col-sm-3">
综合门户<br/>
搜索引擎<br/>
单位门户网站<br/>
网络游戏<br/>
网络广告<br/>
即时通讯<br/>
网上邮局<br/>
网络新闻<br/>
  </div>
  <div class="col-sm-3">
博客/个人空间<br/>
网络广告/信息<br/>
网络购物<br/>
网上支付<br/>
网上银行<br/>
网上炒股/股票基金<br/>
网络影视<br/>
网络图片<br/>
  </div>
  <div class="col-sm-3">
网络软件/下载<br/>
网上求职<br/>
网上交友/婚介<br/>
网上房产<br/>
网络教育<br/>
网站建设<br/>
WAP<br/>
其它<br/>
  </div>
  <div class="col-sm-3">
  </div>
</div><br/>
6. 网站语言，请在以下列表中选择一项：
   <div class="row">
  <div class="col-sm-3">
中文简体<br/>
中文繁体<br/>
维吾尔语<br/>
哈萨克语<br/>
柯尔克孜语<br/>
蒙古语<br/>
  </div>
  <div class="col-sm-3">
藏语<br/>
壮语<br/>
朝鲜语<br/>
彝语<br/>
苗语<br/>
英语<br/>
  </div>
  <div class="col-sm-3">
日语<br/>
法语<br/>
俄罗斯语<br/>
西班牙语<br/>
阿拉伯语<br/>
  </div>
  <div class="col-sm-3">
  </div>
</div><br/>
7. [绑定独立域名](#绑定独立域名) 所需的信息。
8. 如果需要邮寄幕布，请提供你的地址、电话及联系人名字。

如果企业之前已经备案过其他网站，即备案主体已经存在，此时还应向我们提供备案密码，我们才能完成资料录入工作。

#### 第二步

请去备案提供商的核验点拍照，或者提供你的地址，我们的备案接入商来给你邮寄幕布，因为幕布数量的关系，这里可能需要排队。以下资料需要准备：

1. 企业营业执照副本复印件，盖公章；
2. 企业法人身份证复印件（正反面复印在一张纸上），盖公章；
3. 网站负责人身份证复印件（正反面复印在一张纸上），盖公章（如果和企业法人是同一人的话，此条可忽略）；
4. 网站备案信息真实性核验单（[下载填写样例](https://beianv2.ucloud.cn/files/%E7%BD%91%E7%AB%99%E7%9C%9F%E5%AE%9E%E6%80%A7%E6%A0%B8%E9%AA%8C%E5%8D%95%E6%A0%B7%E4%BE%8B.zip)）
5. 网络安全责任书（[下载填写样例](https://beianv2.ucloud.cn/files/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%B9%A6.zip)）
6. 法人授权书复印件（[下载填写样例](https://beianv2.ucloud.cn/files/%E6%B3%95%E4%BA%BA%E6%8E%88%E6%9D%83%E4%B9%A6.zip)）

<a id="isp_inspection_office" name="isp_inspection_office"></a>**备案拍照核验点地址：**

城市|地址|预约电话
---|---|---
北京|北京市海淀区海淀北二街中关村 SOHO B 区—510 室|15901173539
上海|上海市杨浦区隆昌路 619 号城市概念创意园区 8 号楼北区 A01 室|021-65012912
深圳|深圳市南山区科技中二路威盛科技大厦 602 室|13794465215
青岛|青岛市崂山区松岭路 169 号蓝色硅谷软件中心 202 室|0532-67788606-8810<br/> 0532-83842530-8810

<a id="isp_mailing" name="isp_mailing"></a>**备案资料邮寄地址：**

<div class="row">
  <div class="col-sm-6">
<p><strong>北京</strong></p>
北京市海淀区中关村 SOHO 510 室<br/>
网站备案部<br/>
010-59718403<br/>
  </div>
  <div class="col-sm-6">
<p><strong>上海</strong></p>
上海市杨浦区隆昌路 619 号城市概念 8 号楼北区 A01<br/>
备案组<br/>
021-55509888<br/>
</div>
</div>

#### 第三步

由我们和备案接入商来完成。备案完成后，我们再执行绑定操作。

以上任何一个步骤有疑问都可以直接发邮件给 support@leancloud.rocks 进行询问，我们会有专人负责跟进和回答相关问题。

## 运行环境定制

{% block custom_runtime %}{% endblock %}

## 预备环境和生产环境

云引擎区分「预备环境」和「生产环境」， 它们拥有不同的域名:

* 预备环境：`stg-{{var_app_domain}}.leanapp.cn`
* 生产环境：`{{var_app_domain}}.leanapp.cn`

但是两个环境使用相同的数据源。代码在预备环境测试通过后，再部署到生产环境是更安全的做法。

**提示**：[免费版](leanengine_plan.html#免费版) 没有预备环境。

**提示**: 如果希望能有一个独立数据源的测试环境，建议单独创建一个应用。

有些时候你可能需要知道当前云引擎运行在什么环境（开发环境、预备环境或生产环境），从而做不同的处理：

{% block get_env %}{% endblock %}

你应该注意到了，我们在请求云引擎的时候，通过 REST API 的特殊的 HTTP 头 `X-LC-Prod`，来区分调用的环境。

* 0 表示调用预备环境
* 1 表示调用生产环境

具体到 SDK 内的调用，请看各个平台的 SDK 指南。

有些时候请求云引擎时会提示 production 还没有部署：

```json
{"code":1,"error":"The cloud code isn't deployed for prod 1."}
```

这个错误通常是只是部署了预备环境而没有部署生产环境导致的。

## 时区问题

因为某些原因，云引擎 2.0 默认使用的是 UTC 时间，这给很多开发者带来了困惑，所以我们着重讨论下时区问题。

比如有这样一个时间：`2015-05-05T06:15:22.024Z` (ISO 8601 表示法)，最后末尾的 `Z` 表示该时间是 UTC 时间。

上面的时间等价于：`2015-05-05T14:15:22.024+0800`，注意此时末尾是 `+0800` 表示该时间是东八区时间。这两个时间的「小时」部分相差了 8 小时。

### 时区问题产生的原因

很多开发者在时间处理上会忽略「时区」标志，导致最后总是莫名其妙的出现 8 小时的偏差。

【场景一】某开发者开发的应用使用云引擎的主机托管功能做了一个网站，其中有时间格式的表单提交。某用户使用浏览器访问该网站，提交表单，时间格式为：`2015-05-05 14:15:22.024`，注意该时间没有「时区」标志。因为这个时间是浏览器生成的，而该用户浏览器上的时间通常是东八区时间，所以该业务数据希望表达的时间是「东八区的 14 点」。

该时间 `2015-05-05 14:15:22.024` 提交到服务器，被转换为 Date 类型（JavaScript 代码：`new Date('2015-05-05 14:15:22.024')`）。因为云引擎 2.0 使用的是 UTC 时间，所以该时间会被处理为 `2015-05-05T14:15:22.024Z`，即「UTC 时间的 14 点」。导致最后获得的时间和期望时间相差了 8 小时。

解决上面的办法很简单：时间格式带上时区标志。即浏览器上传时间时使用 `2015-05-05T14:15:22.024+0800`，这样不管服务端默认使用什么时区，带有时区的时间格式转换的 Date 都不会有歧义。

【场景二】从数据库获取某记录的 `createdAt` 属性，假设值为：`2015-04-09T03:35:09.678Z`。因为云引擎默认时区是 UTC，所以一些时间函数的返回结果如下：

函数|结果
---|---
`toISOString`|2015-04-09T03:35:09.678Z
`toLocaleString`|Thu Apr 09 2015 03:35:09 GMT+0000 (UTC)
`toUTCString`|Thu, 09 Apr 2015 03:35:09 GMT
`toString`|Thu Apr 09 2015 03:35:09 GMT+0000 (UTC)
`getHours`|3，如果将 getHours 的结果返回给浏览器，或者作为业务数据使用，则会出现 8 小时的偏差。

如果需要获取小时数据，解决办法是使用第三方的组件，比如 [moment-timezone](http://momentjs.com/timezone/)，通过下面的方式可以获得东八区的小时时间：

```javascript
var time = moment(obj.createdAt).tz('Asia/Shanghai');
console.log('toString', time.toString());
console.log('getHours', time.hours());
```

### 云引擎 2.0 和云引擎时区的差异

为了方便大家的使用，更加符合通常的习惯，云引擎运行时环境（无沙箱的 Node.js 环境和 Python 环境）都是使用**东八区**作为默认时区。当然，我们仍然建议程序的时间字符串带有时区标志。

{% block introduceCloudCodeV2 %}{% endblock %}

## 日志

[云引擎 / 日志](/cloud.html?appid={{appid}}#/log)，可以查看云引擎的部署和运行日志，还可以通过日志级别进行筛选。

应用的日志可以直接输出到「标准输出」或者「标准错误」，这些信息会分别对应日志的 `info` 和 `error` 级别，比如下列代码会在 info 级别记录参数信息：

{% block loggerExample %}{% endblock %}

**注意**：日志单行最大 4096 个字符，多余部分会被丢弃；日志输出频率大于 600 条/分钟，多余的部分会被丢弃。
