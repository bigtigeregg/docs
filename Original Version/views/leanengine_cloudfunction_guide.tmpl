{% set appid = '{{appid}}' %}
{% set appkey = '{{appkey}}' %}
{% set masterkey = '{{masterkey}}' %}
{% set quartz_docs_link = '[Quartz 文档（英文）](http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger)' %}

# 云函数开发指南 &middot; {{platformName}}

云函数是云引擎（{{productName}}）的一个子模块，请确保阅读本文档之前，你已经阅读了 [云引擎服务概览](leanengine_overview.html)。

当你开发移动端应用时，可能会有下列需求：

* 应用在多平台客户端（Android、iOS、Windows Phone、浏览器等）中很多逻辑都是一样的，希望将这部分逻辑抽取出来只维护一份。
* 有些逻辑希望能够较灵活的调整（比如某些个性化列表的排序规则），但又不希望频繁的更新和发布移动客户端。
* 有些逻辑需要的数据量很大，或者运算成本高（比如某些统计汇总需求），不希望在移动客户端进行运算，因为这样会消耗大量的网络流量和手机运算能力。
* 当应用执行特定操作时，由云端系统自动触发一段逻辑（称为 [Hook 函数](#Hook_函数)），比如：用户注册后对该用户增加一些信息记录用于统计；或某业务数据发生变化后希望做一些别的业务操作。这些代码不适合放在移动客户端（比如因为上面提到的几个原因）。
* 需要定时任务，比如每天凌晨清理垃圾注册账号等。

这时，你可以使用云引擎的云函数。云函数是一段部署在服务端的代码，编写 JavaScript 或者 Python 代码，并部署到我们的平台上，可以很好的完成上述需求。

如果还不知道如何创建云引擎项目，本地调试并部署到云端，请阅读 [云引擎快速入门](leanengine_quickstart.html)。

## 云函数

示例项目中 {{ cloud_func_file }} 文件定义了一个很简单的 `hello` 云函数。现在让我们看一个明显较复杂的例子来展示云引擎的用途。在云端进行计算的一个重要理由是，你不需要将大量的数据发送到设备上做计算，而是将这些计算放到服务端，并返回结果这一点点信息就好。

例如，你写了一个应用，让用户对电影评分，一个评分对象大概是这样：

```json
{
  "movie": "夏洛特烦恼",
  "stars": 5,
  "comment": "夏洛一梦，笑成麻花"
}
```

`stars` 表示评分，1-5。如果你想查找《夏洛特烦恼》这部电影的平均分，你可以找出这部电影的所有评分，并在设备上根据这个查询结果计算平均分。但是这样一来，尽管你只是需要平均分这样一个数字，却不得不耗费大量的带宽来传输所有的评分。通过云引擎，我们可以简单地传入电影名称，然后返回电影的平均分。

Cloud 函数接收 JSON 格式的请求对象，我们可以用它来传入电影名称。整个 {{ sdk_guide_link }} 都在云引擎运行环境上有效，可以直接使用，所以我们可以使用它来查询所有的评分。结合在一起，实现 `averageStars` 函数的代码如下：

{% block cloudFuncExample %}{% endblock %}

### 参数信息

{% block cloudFuncParams %}{% endblock %}

### 调用云函数

#### iOS /OS X SDK 调用云函数

在 iOS SDK 中，`AVCloud` 提供了一系列的静态方法实现客户端调用云函数：

```objc
     // 构建传递给服务端的参数字典
     NSDictionary *dicParameters = [NSDictionary dictionaryWithObject:@"夏洛特烦恼" forKey:@"movie"];
    
    // 调用指定名称的云函数 averageStars，并且传递参数
    [AVCloud callFunctionInBackground:@"averageStars" withParameters:dicParameters block:^(id object, NSError *error) {
        // 执行结果
    }];
```

##### RPC 调用云函数

`+[AVCloud callFunctionInBackground:withParameters:block:]` 方法返回的结果是 `NSDictionary` 对象，而不是 `AVObject` 对象。为了实现直接返回 `AVObject` 对象，iOS SDK 在 v3.1.6.6 中加入了 RPC 调用。

RPC 调用云函数的方法签名以 `rpc` 开头，例如 `+[AVCloud rpcFunctionInBackground:withParameters:block:]`，除此之外，还有其他的变种。

```objc
    NSDictionary *parameters = @{...};

    [AVCloud rpcFunctionInBackground:@"averageStars" withParameters:parameters block:^(id object, NSError *error) {
        // 执行结果
    }];
```

##### 切换云引擎环境

云引擎区分「预备环境」和「生产环境」，使用 `AVCloud` 的 `setProductionMode` 方法可以切换环境：

```objc
//
[AVCloud setProductionMode:NO];
```

其中 `NO` 表示「预备环境」，默认调用生产环境。


运行上述代码请确保已经正确安装了 LeanCloud iOS / OS SDK，详细请点击 [iOS / OS X SDK 安装指南](sdk_setup-ios.html)。


#### Android SDK 调用云函数

{% block code_client_sdk_callfuntion %}{% endblock %}
在 Android SDK 中，`AVCloud` 里面提供了一系列的静态方法实现客户端调用云函数。

```java
    // 构建参数
    Map<String, String> dicParameters = new HashMap<String, String>();
    dicParameters.put("movie", "夏洛特烦恼");

    // 调用云函数 averageStars
    AVCloud.callFunctionInBackground("averageStars", dicParameters, new FunctionCallback() {
        public void done(Object object, AVException e) {
            if (e == null) {
                // 处理返回结果
            } else {
                // 处理报错
            }
        }
    });
```
##### RPC 调用云函数

`callFunction` 方法的返回并不支持 `AVObject` 类型的解析，很多用户不得不通过 HashMap 来返回结果。考虑到这个因素，我们在 v3.10.2 提供了 `rpcFunction` 以支持 `AVObject` 类型。

```java
    AVObject movie = new AVObject("Movie");
    movie.put("title", "夏洛特烦恼");
    movie.save();

    AVCloud.rpcFunctionInBackground("averageStars", movie,
        new FunctionCallback<AVObject>() {
          @Override
          public void done(AVObject object, AVException e) {
            Assert.assertNull(e);
          }
        });
```

##### 切换云引擎环境

云引擎区分「预备环境」和「生产环境」，使用 `setProductionMode` 方法可以切换环境：

```java
AVCloud.setProductionMode(false); //调用预备环境
```

默认为 true，也就是调用生产环境的云引擎函数。


运行上述代码请确保已经正确安装了 LeanCloud Android SDK，详细请点击[LeanCloud Android SDK 安装指南](sdk_setup-android.html)。

#### 云引擎调用云函数

在云引擎中可以使用 {{ runFuncName }} 调用 {{ defineFuncName }} 定义的云函数：

{% block runFuncExample %}{% endblock %}

API 参数详解参见 {{ runFuncApiLink }}。

**提示**：云引擎中调用云函数会变成一次本地调用，不会向其他 SDK 那样发起一次 HTTP 请求。

#### 通过 REST API 调用云函数
[REST API 调用云函数](rest_api.html#云函数-1) 是 LeanCloud 云端提供的统一的访问云函数的接口，所有的客户端 SDK 也都是封装了这个接口实现对云函数进行调用。

关于调试工具，我们推荐的工具有：[Postman](http://www.getpostman.com/) 以及 [Paw](#https://luckymarmot.com/paw) ，他们可以帮助开发者更方便地调试 Web API。

假设没有以上工具，也可以使用命令行进行调试：

```sh
curl -X POST -H "Content-Type: application/json; charset=utf-8" \
       -H "X-LC-Id: {{appid}}" \
       -H "X-LC-Key: {{appkey}}" \
       -H "X-LC-Prod: 0" \
       -d '{"movie":"夏洛特烦恼"}' \
https://leancloud.cn/1.1/functions/averageStars
``` 
上述命令行实际上就是向服务端发送一个 JSON 对象作为参数，参数的内容是告诉服务端要查询的电影的名字。

### 云函数错误响应码

{% block errorCodeExample %}{% endblock %}

客户端收到的响应：`{"code":211,"error":"Could not find user"}`

{% block errorCodeExample2 %}{% endblock %}

客户端收到的响应： `{"code":123,"error":"自定义错误信息"}`

### 云函数超时

云函数超时时间为 15 秒，如果超过阈值，{{leanengine_middleware}} 将强制响应：

* 客户端收到 HTTP status code 为 503 响应，body 为 `The request timed out on the server.`。
* 服务端会出现类似这样的日志：`LeanEngine function timeout, url=/1.1/functions/<cloudFunc>, timeout=15000`

另外还需要注意：虽然 {{leanengine_middleware}} 已经响应，但此时云函数可能仍在执行，但执行完毕后的响应是无意义的。

#### 超时的处理方案

我们建议将代码中的任务转化为异步队列处理，以优化运行时间，避免云函数或 [定时任务](#定时任务) 发生超时。比如：

- 在存储服务中创建一个队列表，包含 `status` 列；
- 接到任务后，向队列表保存一条记录，`status` 值设置为「处理中」，然后直接 response，也可以把队列对象 id 返回，如 `response.success(id);`；
- 当业务处理完毕，根据处理结果更新刚才的队列对象状态，将 `status` 字段设置为「完成」或者「失败」；
- 在任何时候，在控制台通过队列 id 可以获取某个任务的执行结果，判断任务状态。

## Hook 函数

Hook 函数本质上是云函数，但它有固定的名称，定义之后会**由系统**在特定事件或操作（如数据保存前、保存后，数据更新前、更新后等等）发生时**自动触发**，而不是由开发者来控制其触发时机。

需要注意：

- 通过控制台进行 [数据导入](dashboard_guide.html#本地数据导入_LeanCloud) 不会触发以下任何 hook 函数。
- 使用 Hook 函数需要 [防止死循环调用](#防止死循环调用)。

### {{hook_before_save}}
在将对象保存到云端数据表之前，可以对数据做一些清理或验证。例如，一条电影评论不能过长，否则界面上显示不开，需要将其截断至 140 个字符：

{% block beforeSaveExample %}{% endblock %}

### {{hook_after_save}}

在数据保存后触发指定操作，比如当一条留言保存后再更新一下所属帖子的评论总数：

{% block afterSaveExample %}{% endblock %}

再如，在用户注册成功之后，给用户增加一个新的属性 from 并保存：

{% block afterSaveExample2 %}{% endblock %}

如果 `afterSave` 函数调用失败，save 请求仍然会返回成功应答给客户端。`afterSave` 发生的任何错误，都将记录到云引擎日志里，可以到 [控制台 > 存储 > 云引擎 > 日志](https://leancloud.cn/cloud.html?appid={{appid}}#/log) 中查看。

### {{hook_before_update}}

{% block beforeUpdate %}
在更新对象前执行操作，这时你可以知道哪些字段已被修改，还可以在特定情况下拒绝本次修改：

{% block beforeUpdateExample %}{% endblock %}

**注意**：传入的对象是一个尚未保存到数据库的临时对象，并不保证与最终储存到数据库的对象完全相同，这是因为修改中可能包含自增、数组增改、关系增改等原子操作。
{% endblock %}

### {{hook_after_update}}

在更新对象后执行特定的动作，比如每次修改文章后记录下日志：

{% block afterUpdateExample %}{% endblock %}

### {{hook_before_delete}}

在删除一个对象之前做一些检查工作，比如在删除一个相册 Album 前，先检查一下该相册中还有没有照片 Photo：

{% block beforeDeleteExample %}{% endblock %}

### {{hook_after_delete}}

在被删一个对象后执行操作，例如递减计数、删除关联对象等等。同样以相册为例，这次我们不在删除相册前检查是否还有照片，而是在删除后，同时删除相册中的照片：

{% block afterDeleteExample %}{% endblock %}

### {{hook_on_verified}}

当用户通过邮箱或者短信验证时，对该用户执行特定操作。比如：

{% block onVerifiedExample %}{% endblock %}

函数的第一个参数是验证类型。短信验证为 `sms`，邮箱验证为 `email`。另外，数据库中相关的验证字段，如 `emailVerified` 不需要修改，系统会自动更新。

### {{hook_on_login}}

在用户登录之时执行指定操作，比如禁止在黑名单上的用户登录：

{% block onLoginExample %}{% endblock %}

### 实时通信 Hook 函数

请阅读 [实时通信概览 &middot; 云引擎 Hook](realtime_v2.html#云引擎_Hook) 来了解以下函数的具体用法：

- `_messageReceived`
- `_receiversOffline`
- `_conversationStart`
- `_conversationAdd`
- `_conversationRemove`

{% block hookDeadLoop %}

### 防止死循环调用

在实际使用中有这样一种场景：在 `Post` 类的 `afterUpdate` Hook 函数中，对传入的 `Post` 对象做了修改并且保存，而这个保存动作又会再次触发 `afterUpdate`，由此形成死循环。针对这种情况，我们为所有 Hook 函数传入的 `request.object` 对象做了处理，以阻止死循环调用的产生。

不过请注意，以下情况还需要开发者自行处理：

- 对传入的 `request.object` 对象进行 `fetch` 操作。
- 重新构造传入的 `request.object` 对象，如使用 `AV.Object.createWithoutData()` 方法。

对于使用上述方式产生的对象，请根据需要自行调用以下 API：

- `object.disableBeforeHook()` 或 
- `object.disableAfterHook()` 

这样，对象的保存或删除动作就不会再次触发相关的 Hook 函数。

```javascript
AV.Cloud.afterUpdate('Post', function(request) {
    // 直接修改并保存对象不会再次触发 afterUpdate Hook 函数
    request.object.set('foo', 'bar');
    request.object.save().then(function(obj) {
      // 你的业务逻辑
    });

    // 如果有 fetch 操作，则需要在新获得的对象上调用相关的 disable 方法
    // 来确保不会再次触发 Hook 函数
    request.object.fetch().then(function(obj) {
      obj.disableAfterHook();
      obj.set('foo', 'bar');
      return obj.save();
    }).then(function(obj) {
      // 你的业务逻辑
    });

    // 如果是其他方式构建对象，则需要在新构建的对象上调用相关的 disable 方法
    // 来确保不会再次触发 Hook 函数
    var obj = AV.Object.createWithoutData('Post', request.object.id);
    obj.disableAfterHook();
    obj.set('foo', 'bar');
    obj.save().then(function(obj) {
      // 你的业务逻辑
    });
  });
```

**提示**：云引擎 Node.js 环境从 [0.3.0](https://github.com/leancloud/leanengine-node-sdk/blob/master/CHANGELOG.md#v030-20151231) 开始支持 `object.disableBeforeHook()` 和 `object.disableAfterHook()`。
{% endblock %}

### Hook 函数错误响应码

为 `{{hook_before_save}}` 这类的 hook 函数定义错误码，需要这样：

{% block errorCodeExampleForHooks %}{% endblock %}

客户端收到的响应为：`Cloud Code validation failed. Error detail : {"code":123, "message": "自定义错误信息"}`，然后通过**截取字符串**的方式取出错误信息，再转换成需要的对象。

### Hook 函数超时

Hook 函数的超时时间为 3 秒。如果 Hook 函数被其他的云函数调用（比如因为 save 对象而触发 `beforeSave` 和 `afterSave`），那么它们的超时时间会进一步被其他云函数调用的剩余时间限制。

例如，如果一个 `beforeSave` 函数是被一个已经运行了 13 秒的云函数触发，那么 `beforeSave` 函数就只剩下 2 秒的时间来运行。同时请参考 [云函数超时](#云函数超时)。

{% block online_editor %}{% endblock %}

## 定时任务

定时任务可以按照设定，以一定间隔自动完成指定动作，比如半夜清理过期数据，每周一向所有用户发送推送消息等等。定时任务的最小时间单位是**秒**，正常情况下时间误差都可以控制在秒级别。

{% block timerLegacy %}{% endblock %}

定时任务是普通的云函数，也会遇到 [超时问题](#云函数超时)，具体请参考 [超时处理方案](#超时的处理方案)。

部署云引擎之后，进入 [控制台 > 存储 > 云引擎 > 定时任务](/cloud.html?appid={{appid}}#/task)，点击 **创建定时器**，然后设定执行的函数名称、执行环境等等。例如定义一个打印循环打印日志的任务 `log_timer`：

{% block timerExample %}{% endblock %}

定时器创建后，其状态为**未运行**，需要点击 <span class="label label-default">启用</span> 来激活。之后其执行日志可以通过 [日志](/cloud.html?appid={{appid}}#/log) 查看。

定时任务分为两类：

* 使用 Cron 表达式安排调度
* 以秒为单位的简单循环调度
 
以 Cron 表达式为例，比如每周一早上 8 点准时发送推送消息给用户：

{% block timerExample2 %}{% endblock %}

创建定时器的时候，选择 **Cron 表达式** 并填入 `0 0 8 ? * MON`。

### Cron 表达式

Cron 表达式的基本语法为：

```
<秒> <分钟> <小时> <日期 day-of-month> <月份> <星期 day-of-week> <年>
```
位置|字段|约束|取值|可使用的特殊字符
---|---|---|---|---
1|秒|必须|0-59|`, - * /`
2|分钟|必须|0-59|`, - * /`
3|小时|必须|0-23（0 为午夜）|`, - * /`
4|日期|必须|1-31|`, - * ? / L W`
5|月份|必须|1-12、JAN-DEC|`, - * /`
6|星期|必须|1-7、SUN-SAT|`, - * ? / L #`
7|年|可选|空、1970-2099|`, - * /`

特殊字符的用法：

字符|含义|用法
---|---|---
`*`|所有值|代表一个字段的所有可能取值。如将 `<分钟>` 设为 **\***，表示每一分钟。
`?`|不指定值|用于可以使用该字符的两个字段中的一个，在一个表达式中只能出现一次。如任务执行时间为每月 10 号，星期几无所谓，那么表达式中 `<日期>` 设为 **10**，`<星期>` 设为 **?**。
`-`|范围|如 `<小时>` 为 **10-12**，即10 点、11 点、12 点。
`,`|<span class="text-nowrap">分隔多个值</span>|如 `<星期>` 为 **MON,WED,FRI**，即周一、周三、周五。
`/`|增量|如 `<秒>` 设为 **0/15**，即从 0 秒开始，以 15 秒为增量，包括 0、15、30、45 秒；**5/15** 即 5、20、35、50 秒。**\*/** 与 **0/** 等效，如 `<日期>` 设为 **1/3**，即从每个月的第一天开始，每 3 天（即每隔 2 天）执行一次任务。
`L`|最后|其含义随字段的不同而不同。 `<日期>` 中使用 **L** 代表每月最后一天，如 1 月 31 号、2 月 28 日（非闰年）；`<星期>` 中单独使用 **L**，则与使用 **7** 或 **SAT** 等效，若前面搭配其他值使用，如 **6L**，则表示每月的最后一个星期五。<br/><br/>注意，**在 L 之前不要使用多个值或范围**，如 **1,2L**、**1-2L**，否则会产生错误结果。
`W`|weekday|周一到周五的任意一天，离指定日期最近的非周末的那一天。<br/>`<日期>` 为 **15W** 即离 15 号最近的非周末的一天；如果 15 号是周六，任务则会在 14 号周五触发，如果 15 号是周日，则在 16 号周一触发，如果 15 号是周二，则周二当天触发。<br/><br/>`<日期>` 为 **1W**，如果 1 号是周六，任务则会在 3 号周一触发，因为不能向前跨月来计算天数。<br/><br/>在 `<日期>` 中 **W** 之前只能使用一个数值，不能使用多个值或范围。**LW** 可在 `<日期>` 中组合使用，表示每月最后一个非周末的一天。
`#`|第 N 次|如 `<星期>` 为 **6#3** 代表每月第三个周五，**2#1** 为每月头一个周一，**4#5** 为每月第五个周三；如果当月没有第五周，则 **#5** 不会产生作用。

各字段以空格或空白隔开。JAN-DEC、SUN-SAT 这些值不区分大小写，比如 MON 和 mon 效果一样。更详细的使用方法请参考 {{quartz_docs_link}} 。

举例如下：

表达式|说明
---|---
`0  0/5 * * * ?`|每隔 5 分钟执行一次
`10 0/5 * * * ?`|每隔 5 分钟执行一次，每次执行都在分钟开始的 10 秒，例如 10:00:10、10:05:10 等等。
<code style="white-space:nowrap;">0 30 10-13 ? * WED,FRI</code>|每周三和每周五的 10:30、11:30、12:30、13:30 执行。
`0 0/30 8-9 5,20 * ?`| 每个月的 5 号和 20 号的 8 点和 10 点之间每隔 30 分钟执行一次，也就是 8:00、8:30、9:00 和 9:30。

### 定时器数量

生产环境和预备环境的定时器数量都限制在 5 个以内，也就是说你总共最多可以创建 10 个定时器。

### 错误信息

定时器执行后的日志会记录在 [控制台 > 存储 > 云引擎 > 其它 > 日志](/cloud.html?appid={{appid}}#/log) 中，以下为常见的错误信息及原因。

- **timerAction timed-out and no fallback available.**<br/>
  某个定时器触发的云函数，因 15 秒内没有响应而超时（可参考 [对云函数调用超时的处理](#超时的处理方案)）。
- **timerAction short-circuited and no fallback available.**<br/>
  某个定时器触发的云函数，因为太多次超时而停止触发。

## 权限说明

云引擎可以有超级权限，使用 master key 调用所有 API，因此会忽略 ACL 和 Class Permission 限制。你只需要使用下列代码来初始化 SDK：

{% block masterKeyInit %}{% endblock %}

如果在你的服务端环境里也想做到超级权限，也可以使用该方法初始化。

{% block masterKeyInitLegacy %}{% endblock %}
