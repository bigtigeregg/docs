{% set appid = '{{appid}}' %}
{% set appkey = '{{appkey}}' %}
{% set masterkey = '{{masterkey}}' %}

# LeanCloud {{platform}} 关系建模指南

数据对象之间存在 3 种类型的关系。一对一关系可以将一个对象与另一个对象关联。一对多关系可以使一个对象关联多个对象。多对多关系可以实现大量对象之间的复杂关系。

## LeanCloud 中的关系
LeanCloud中 有 4 种方式构建对象之间的关系：

1. Pointers （适合一对一和一对多关系）
2. Arrays （适合一对多和多对多关系）
3. AVRelation （适合多对多关系）
4. 关联表 （适合多对多关系）

## 一对多关系
当你需要一个一对多关系的时候，该使用 Pointers 还是 Arrays 实现，需要考虑几个因素。首先，需要考虑关系中包含的对象数量。如果关系「多」方包含的对象数量可能非常大（大于 100 左右），那么你就必须使用 Pointers。反之，如果对象数量很小（低于 100 或更少），那么 Arrays 可能会更方便，特别是如果你经常需要获取父对象同时得到所有相关的对象（一对多关系中的「多」）。

### 使用 Pointers 实现一对多关系
#### Pointers 存储
中国的「省份」与「城市」就是一个典型的一对多的关系，例如，深圳和广州（「城市」）都属于广东省（「省份」），而朝阳区和海淀区（「行政区」）只能属于北京市（「直辖市」）。广东省对应着多个一级行政城市，北京对应着多个行政区。如下代码将演示，如何使用 Pointers 来存储这种一对多的关系。

**注：为了表述方便，后文中提及城市都泛指一级行政市以及直辖市行政区，而省份也包含了北京，上海等直辖市。**

{% block code_city_point_to_province %}{% endblock %}

需要声明的是：被关联的对象会跟随着关联对象的保存而被保存到服务端。如果想关联一个已经存在服务端的对象，也可以使用如下代码，例如，下述代码将实现给将「东莞市」添加至「广东省」：

{% block code_city_point_to_province_with_objectId %}{% endblock %}

执行上述代码，可以在控制台看见在 `dependent` 字段上它显示的是一个 Pointer 类型的数据，而它的本质上存储的是一个指向 `City` 这张表的某一个 `AVObject` 的一个指针。

#### Pointers 查询
假如已知一个城市，想知道它的上一级的省份，可以使用如下代码：

{% block code_fetch_province_by_city %}{% endblock %}

假如连城市这个对象也是查询出来的结果，而希望通过一次查询同时把对应的省份也一并加载到本地，这种操作 SDK 也是支持的，代码如下：

{% block code_query_province_by_city %}{% endblock %}

假如已知一个省份，要找出它的所有下辖城市，可以使用如下代码：

{% block code_query_city_by_province %}{% endblock %}

大多数场景下，Pointers 是实现一对多关系的最好选择。

### 使用 Arrays 实现一对多关系

#### Arrays 存储
当我们知道一对多关系中包含的对象数量很小时，使用 Arrays 实现是比较理想的。Arrays 可以通过 `includeKey` 简化查询。传递对应的 key 可以在获取「一」方对象数据的同时获取到所有「多」方对象的数据。但是，如果关系中包含的对象数量巨大，查询将响应缓慢。

在我们的城市与省份对应关系中，也可以使用 Arrays 实现。

我们重新建立对象，为 `Province` 对象添加一列：`cityList`，用来保存城市数组，代码如下：

{% block code_save_cityList_array %}{% endblock %}

#### Arrays 查询
如果我们需要获取这些 `City` 对象，需要如下代码：

{% block code_get_cityList_array %}{% endblock %}

如果要在查询某一个省份的时候，顺便把所有下辖的城市也获取到本地，可以在构建查询的时候使用 `Include` 操作，这样就可以通过一次查询同时获取 `cityList` 列中存放的 `City` 对象集合：

{% block code_query_province_include_cityList %}{% endblock %}

我们同样也可以根据已知的城市来查询它所属的上级省份，例如，我们想找出南京所属的省份，可以使用如下代码：

{% block code_query_province_by_city_with_containsIn %}{% endblock %}

## 多对多关系
现在让我们来处理多对多关系。假设我们有一个读书应用，我们需要对 `Book` 对象和 `Author` 对象建模。如我们所知，一个作者可以写多本书，一本书也可以有多个作者。这是一个典型的多对多关系，你必须选择使用 Arrays， Relation 或创建自己的关联表来实现这种关系。

决策的关键在于是否需要为这个关系附加一些属性。如果不需要，使用 Relation 或 Arrays 是最简单的。通常情况下，使用 Arrays 会有更好的性能和更少的查询。如果多对多关系中任何一方对象数量可能达到或超过 100，像一对多关系中描述的原因一样，使用 Relation 或关联表是更好的选择。

另一方面，如果你想为关系附加一些属性，则需要创建一个独立的表（关联表）来存储两端的关系。记住，附加的属性是描述这个关系的，不是描述关系中的任何一方。你可能会感兴趣的需要使用关联表附加一些属性的示例有：

* 关系创建的时间
* 关系创建者
* 某人查看此关系的次数

### 使用 Relation 实现多对多关系

#### Relation 的存储
我们可以使用 Relation 构建一个 `Student` 和 `Course` 之间的关系。
一个学生可以学习「多」门课程，一门课程也可以拥有「多」个学生。

如下代码实现的需求是为一个学生选择多门课程：

{% block code_save_student_related_to_course_with_relation %}{% endblock %}

#### Relation 的查询
要获取某个课程的所有学生，使用如下查询即可：

{% block code_query_student_by_course %}{% endblock %}

也许你更需要获取某个学生学习的所有的课程。你可以构造一个稍微不同的查询来获取这种反向关系的结果：

{% block code_query_courses_by_student %}{% endblock %}

### 使用关联表实现多对多关系
也许某些情况下，我们需要知道更多关系的附加信息。比如学生选课的系统中，如果你想知道学生打算选修的这门课进行多长时间的学习，或者想知道学生选修是通过手机选修还是通过网站操作的，这个时候单独使用 `AVRelation` 就无法满足需求，因为 `AVRelation` 不支持额外的自定义属性，此时我们可以使用传统的数据库设计方法：关联表。

为了实现这个需求，我们创建一个独立的表保存 `Student` 和 `Course` 的关系，暂且叫做 `StudentCourseMap` 的表，然后它有以下几个字段：

```
1.course ： Course 指针实例
2.student： Student 指针实例
3.duration：该学生选修这门课程的为期，数组类型，例如：["2016-02-19","2016-04-21"]表示选修开始和结束的时间点
4.platform：操作时使用的设备，String 类型，例如：iOS
```
如此，实现选修功能的代码如下：

{% block code_save_relationTable_student_with_course %}{% endblock %}

如果想查询选修了某一课程的所有学生，可以进行如下查询：

{% block code_query_relationTable_students_in_course %}{% endblock %}

同样，我们也可以很简单地查询某一个学生选修的所有课程，针对上述代码只需变换查询条件即可：

{% block code_query_relationTable_courses_by_student %}{% endblock %}

### 使用 Arrays 实现多对多关系
使用 Arrays 实现多对多关系跟实现一对多关系大致相同。关系中一方的所有对象拥有一个数组列包含一些关系另一方的对象。

就拿选课系统来举例，现在我们使用 Arrays 的方式实现学生选课的操作，代码如下：

{% block code_save_courses_using_arrays %}{% endblock %}

当查询某一个学生选修的所有课程，则在查询的时候需要使用 `Include` 操作来获取对应的数组值：

{% block code_query_courses_by_include %}{% endblock %}

假如查询选修了某一个课程所有学生，可以如下操作：

{% block code_query_using_array_contains %}{% endblock %}

## 一对一关系
当你需要将一个对象拆分成两个对象时，一对一关系是一种重要的需求。这种需求应该很少见，但是在下面的实例中体现了这样的需求：

* **限制部分用户数据的权限** 在这个场景中，你可以将此对象拆分成两部分，一部分包含所有用户可见的数据，另一部分包含所有仅自己可见的数据（通过ACL控制）。同样，你也可以实现一部分包含所有用户可修改的数据，另一部分包含所有仅自己可修改的数据。
* **避免大对象** 在这个场景中，你的原始对象大小大于了对象的上限值（128K），你可以创建另一个对象来存储额外的数据。当然，这通常需要更好地设计你的数据模型来避免出现大对象。如果确实无法避免，你也可以考虑使用AVFile存储大数据。
* **更灵活的文件对象** AVFile 可以方便的存取文件，但是作为对象查询修改等不是很方便，可以使用 AVObject 构造一个自己的文件对象并与 AVFile 一对一关联，将文件属性存于AVObject 中，这样既可以方便查询修改文件属性，也可以方便存取文件。
